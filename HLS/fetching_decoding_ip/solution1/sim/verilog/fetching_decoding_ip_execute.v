// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fetching_decoding_ip_execute (
        ap_ready,
        pc_val,
        d_i_type_val,
        d_i_imm_val,
        ap_return
);


output   ap_ready;
input  [15:0] pc_val;
input  [2:0] d_i_type_val;
input  [16:0] d_i_imm_val;
output  [15:0] ap_return;

wire   [0:0] icmp_ln8_5_fu_90_p2;
wire   [0:0] icmp_ln8_4_fu_84_p2;
wire   [0:0] icmp_ln8_3_fu_78_p2;
wire   [0:0] icmp_ln8_2_fu_72_p2;
wire   [0:0] icmp_ln8_1_fu_66_p2;
wire   [15:0] trunc_ln_fu_50_p4;
wire   [0:0] icmp_ln8_fu_60_p2;
wire   [0:0] or_ln8_fu_96_p2;
wire   [0:0] or_ln8_1_fu_102_p2;
wire   [0:0] or_ln8_2_fu_116_p2;
wire   [15:0] select_ln8_fu_108_p3;
wire   [0:0] or_ln8_3_fu_122_p2;
wire   [15:0] select_ln8_1_fu_128_p3;
wire   [15:0] select_ln8_2_fu_136_p3;
wire    ap_ce_reg;

assign ap_ready = 1'b1;

assign icmp_ln8_1_fu_66_p2 = ((d_i_type_val == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_60_p2 = ((d_i_type_val == 3'd6) ? 1'b1 : 1'b0);

assign or_ln8_1_fu_102_p2 = (icmp_ln8_3_fu_78_p2 | icmp_ln8_2_fu_72_p2);

assign or_ln8_2_fu_116_p2 = (icmp_ln8_fu_60_p2 | icmp_ln8_1_fu_66_p2);

assign or_ln8_3_fu_122_p2 = (or_ln8_fu_96_p2 | or_ln8_1_fu_102_p2);

assign or_ln8_fu_96_p2 = (icmp_ln8_5_fu_90_p2 | icmp_ln8_4_fu_84_p2);

assign select_ln8_1_fu_128_p3 = ((or_ln8_2_fu_116_p2[0:0] == 1'b1) ? select_ln8_fu_108_p3 : 16'd1);

assign select_ln8_2_fu_136_p3 = ((or_ln8_3_fu_122_p2[0:0] == 1'b1) ? 16'd1 : select_ln8_1_fu_128_p3);

assign select_ln8_fu_108_p3 = ((icmp_ln8_1_fu_66_p2[0:0] == 1'b1) ? 16'd1 : trunc_ln_fu_50_p4);

assign trunc_ln_fu_50_p4 = {{d_i_imm_val[16:1]}};

assign ap_return = (select_ln8_2_fu_136_p3 + pc_val);

assign icmp_ln8_2_fu_72_p2 = ((d_i_type_val == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_78_p2 = ((d_i_type_val == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln8_4_fu_84_p2 = ((d_i_type_val == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln8_5_fu_90_p2 = ((d_i_type_val == 3'd1) ? 1'b1 : 1'b0);

endmodule //fetching_decoding_ip_execute
