// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fetching_decoding_ip_fetching_decoding_ip,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.730200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=341,HLS_SYN_LUT=599,HLS_VERSION=2024_1}" *)

module fetching_decoding_ip (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 19;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] start_pc;
wire   [31:0] code_ram_q0;
reg    nb_instruction_ap_vld;
wire   [31:0] grp_fetch_fu_82_ap_return;
reg   [31:0] instruction_reg_146;
wire    ap_CS_fsm_state3;
wire   [0:0] is_running_running_cond_update_fu_94_ap_return;
reg   [0:0] is_running_reg_152;
wire    ap_CS_fsm_state4;
reg   [2:0] d_i_type_reg_156;
wire    ap_CS_fsm_state5;
wire   [16:0] trunc_ln34_fu_127_p1;
reg   [16:0] trunc_ln34_reg_161;
wire    grp_fetch_fu_82_ap_start;
wire    grp_fetch_fu_82_ap_done;
wire    grp_fetch_fu_82_ap_idle;
wire    grp_fetch_fu_82_ap_ready;
wire   [15:0] grp_fetch_fu_82_code_ram_address0;
wire    grp_fetch_fu_82_code_ram_ce0;
wire    grp_decode_fu_89_ap_start;
wire    grp_decode_fu_89_ap_done;
wire    grp_decode_fu_89_ap_idle;
wire    grp_decode_fu_89_ap_ready;
wire   [2:0] grp_decode_fu_89_ap_return_0;
wire   [19:0] grp_decode_fu_89_ap_return_1;
wire    is_running_running_cond_update_fu_94_ap_ready;
wire    pc_1_execute_fu_99_ap_ready;
wire   [15:0] pc_1_execute_fu_99_ap_return;
reg    grp_fetch_fu_82_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_decode_fu_89_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [15:0] pc_0_fu_64;
wire   [15:0] pc_fu_106_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_fetch_fu_82_ap_start_reg = 1'b0;
#0 grp_decode_fu_89_ap_start_reg = 1'b0;
#0 pc_0_fu_64 = 16'd0;
end

fetching_decoding_ip_fetch grp_fetch_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fetch_fu_82_ap_start),
    .ap_done(grp_fetch_fu_82_ap_done),
    .ap_idle(grp_fetch_fu_82_ap_idle),
    .ap_ready(grp_fetch_fu_82_ap_ready),
    .pc(pc_0_fu_64),
    .code_ram_address0(grp_fetch_fu_82_code_ram_address0),
    .code_ram_ce0(grp_fetch_fu_82_code_ram_ce0),
    .code_ram_q0(code_ram_q0),
    .ap_return(grp_fetch_fu_82_ap_return)
);

fetching_decoding_ip_decode grp_decode_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_decode_fu_89_ap_start),
    .ap_done(grp_decode_fu_89_ap_done),
    .ap_idle(grp_decode_fu_89_ap_idle),
    .ap_ready(grp_decode_fu_89_ap_ready),
    .instruction(instruction_reg_146),
    .ap_return_0(grp_decode_fu_89_ap_return_0),
    .ap_return_1(grp_decode_fu_89_ap_return_1)
);

fetching_decoding_ip_running_cond_update is_running_running_cond_update_fu_94(
    .ap_ready(is_running_running_cond_update_fu_94_ap_ready),
    .instruction(instruction_reg_146),
    .ap_return(is_running_running_cond_update_fu_94_ap_return),
    .ap_rst(ap_rst_n_inv)
);

fetching_decoding_ip_execute pc_1_execute_fu_99(
    .ap_ready(pc_1_execute_fu_99_ap_ready),
    .pc(pc_0_fu_64),
    .d_i_type(d_i_type_reg_156),
    .d_i_imm(trunc_ln34_reg_161),
    .ap_return(pc_1_execute_fu_99_ap_return),
    .ap_rst(ap_rst_n_inv)
);

fetching_decoding_ip_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .start_pc(start_pc),
    .nb_instruction(32'd1),
    .nb_instruction_ap_vld(nb_instruction_ap_vld),
    .code_ram_address0(grp_fetch_fu_82_code_ram_address0),
    .code_ram_ce0(grp_fetch_fu_82_code_ram_ce0),
    .code_ram_q0(code_ram_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_decode_fu_89_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_decode_fu_89_ap_start_reg <= 1'b1;
        end else if ((grp_decode_fu_89_ap_ready == 1'b1)) begin
            grp_decode_fu_89_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fetch_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_fetch_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_fetch_fu_82_ap_ready == 1'b1)) begin
            grp_fetch_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pc_0_fu_64 <= pc_fu_106_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pc_0_fu_64 <= pc_1_execute_fu_99_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_type_reg_156 <= grp_decode_fu_89_ap_return_0;
        trunc_ln34_reg_161 <= trunc_ln34_fu_127_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        instruction_reg_146 <= grp_fetch_fu_82_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        is_running_reg_152 <= is_running_running_cond_update_fu_94_ap_return;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_fetch_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_decode_fu_89_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((is_running_reg_152 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((is_running_reg_152 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((is_running_reg_152 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        nb_instruction_ap_vld = 1'b1;
    end else begin
        nb_instruction_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fetch_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_decode_fu_89_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((is_running_reg_152 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_decode_fu_89_ap_start = grp_decode_fu_89_ap_start_reg;

assign grp_fetch_fu_82_ap_start = grp_fetch_fu_82_ap_start_reg;

assign pc_fu_106_p1 = start_pc[15:0];

assign trunc_ln34_fu_127_p1 = grp_decode_fu_89_ap_return_1[16:0];

endmodule //fetching_decoding_ip
