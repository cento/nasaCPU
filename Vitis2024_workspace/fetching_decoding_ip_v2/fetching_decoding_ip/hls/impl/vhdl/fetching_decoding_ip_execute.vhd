-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fetching_decoding_ip_execute is
port (
    ap_ready : OUT STD_LOGIC;
    pc : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_type : IN STD_LOGIC_VECTOR (2 downto 0);
    d_i_imm : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_rst : IN STD_LOGIC );
end;


architecture behav of fetching_decoding_ip_execute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal trunc_ln_fu_76_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln7_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_3_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_4_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_5_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_pc_fu_144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln27_fu_70_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_pc_fu_144_p15 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_pc_fu_144_p16 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p17 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_pc_fu_144_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_pc_fu_144_p13 : STD_LOGIC_VECTOR (5 downto 0);

    component fetching_decoding_ip_sparsemux_15_6_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        def : IN STD_LOGIC_VECTOR (15 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    sparsemux_15_6_16_1_1_U4 : component fetching_decoding_ip_sparsemux_15_6_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100000",
        din0_WIDTH => 16,
        CASE1 => "010000",
        din1_WIDTH => 16,
        CASE2 => "001000",
        din2_WIDTH => 16,
        CASE3 => "000100",
        din3_WIDTH => 16,
        CASE4 => "000010",
        din4_WIDTH => 16,
        CASE5 => "000001",
        din5_WIDTH => 16,
        CASE6 => "000000",
        din6_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => next_pc_fu_144_p2,
        din1 => add_ln27_fu_70_p2,
        din2 => add_ln27_fu_70_p2,
        din3 => add_ln27_fu_70_p2,
        din4 => add_ln27_fu_70_p2,
        din5 => add_ln27_fu_70_p2,
        din6 => add_ln27_fu_70_p2,
        def => next_pc_fu_144_p15,
        sel => next_pc_fu_144_p16,
        dout => next_pc_fu_144_p17);




    add_ln27_fu_70_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv16_1));
    ap_ready <= ap_const_logic_1;
    ap_return <= next_pc_fu_144_p17;
    icmp_ln7_1_fu_98_p2 <= "1" when (d_i_type = ap_const_lv3_5) else "0";
    icmp_ln7_2_fu_104_p2 <= "1" when (d_i_type = ap_const_lv3_4) else "0";
    icmp_ln7_3_fu_110_p2 <= "1" when (d_i_type = ap_const_lv3_3) else "0";
    icmp_ln7_4_fu_116_p2 <= "1" when (d_i_type = ap_const_lv3_2) else "0";
    icmp_ln7_5_fu_122_p2 <= "1" when (d_i_type = ap_const_lv3_1) else "0";
    icmp_ln7_fu_92_p2 <= "1" when (d_i_type = ap_const_lv3_6) else "0";
    next_pc_fu_144_p15 <= "XXXXXXXXXXXXXXXX";
    next_pc_fu_144_p16 <= (((((icmp_ln7_fu_92_p2 & icmp_ln7_1_fu_98_p2) & icmp_ln7_2_fu_104_p2) & icmp_ln7_3_fu_110_p2) & icmp_ln7_4_fu_116_p2) & icmp_ln7_5_fu_122_p2);
    next_pc_fu_144_p2 <= std_logic_vector(unsigned(trunc_ln_fu_76_p4) + unsigned(pc));
    trunc_ln_fu_76_p4 <= d_i_imm(16 downto 1);
end behav;
