

================================================================
== Synthesis Summary Report of 'fetching_ip'
================================================================
+ General Information: 
    * Date:           Sun Aug 18 12:14:59 2024
    * Version:        2024.1 (Build 5069499 on May 21 2024)
    * Project:        fetching_ip
    * Solution:       hls (Vivado IP Flow Target)
    * Product family: zynq
    * Target device:  xc7z020-clg400-1
    

+ Performance & Resource Estimates: 
    
    PS: '+' for module; 'o' for loop; '*' for dataflow
    +--------------------------------+------+------+---------+--------+----------+---------+------+----------+-----------+----+-----------+-----------+-----+
    |             Modules            | Issue|      | Latency | Latency| Iteration|         | Trip |          |           |    |           |           |     |
    |             & Loops            | Type | Slack| (cycles)|  (ns)  |  Latency | Interval| Count| Pipelined|   BRAM    | DSP|     FF    |    LUT    | URAM|
    +--------------------------------+------+------+---------+--------+----------+---------+------+----------+-----------+----+-----------+-----------+-----+
    |+ fetching_ip                   |     -|  1.49|        -|       -|         -|        -|     -|        no|  128 (45%)|   -|  224 (~0%)|  288 (~0%)|    -|
    | o VITIS_LOOP_24_1              |     -|  7.30|        -|       -|         3|        -|     -|        no|          -|   -|          -|          -|    -|
    |  + fetch                       |     -|  4.05|        1|  10.000|         -|        1|     -|        no|          -|   -|   34 (~0%)|   23 (~0%)|    -|
    |  + execute                     |     -|  5.22|        0|   0.000|         -|        0|     -|        no|          -|   -|          -|   23 (~0%)|    -|
    |  + running_conditional_update  |     -|  4.75|        0|   0.000|         -|        0|     -|        no|          -|   -|          -|   39 (~0%)|    -|
    +--------------------------------+------+------+---------+--------+----------+---------+------+----------+-----------+----+-----------+-----------+-----+


================================================================
== HW Interfaces
================================================================
* S_AXILITE Interfaces
+---------------+------------+---------------+--------+----------+-------------------+
| Interface     | Data Width | Address Width | Offset | Register | Resource Estimate |
+---------------+------------+---------------+--------+----------+-------------------+
| s_axi_control | 32         | 19            | 16     | 0        | BRAM=128          |
+---------------+------------+---------------+--------+----------+-------------------+

* S_AXILITE Registers
+---------------+----------+--------+-------+--------+----------------------------------+----------------------------------------------------------------------+
| Interface     | Register | Offset | Width | Access | Description                      | Bit Fields                                                           |
+---------------+----------+--------+-------+--------+----------------------------------+----------------------------------------------------------------------+
| s_axi_control | CTRL     | 0x00   | 32    | RW     | Control signals                  | 0=AP_START 1=AP_DONE 2=AP_IDLE 3=AP_READY 7=AUTO_RESTART 9=INTERRUPT |
| s_axi_control | GIER     | 0x04   | 32    | RW     | Global Interrupt Enable Register | 0=Enable                                                             |
| s_axi_control | IP_IER   | 0x08   | 32    | RW     | IP Interrupt Enable Register     | 0=CHAN0_INT_EN 1=CHAN1_INT_EN                                        |
| s_axi_control | IP_ISR   | 0x0c   | 32    | RW     | IP Interrupt Status Register     | 0=CHAN0_INT_ST 1=CHAN1_INT_ST                                        |
| s_axi_control | start_pc | 0x10   | 32    | W      | Data signal of start_pc          |                                                                      |
+---------------+----------+--------+-------+--------+----------------------------------+----------------------------------------------------------------------+

* TOP LEVEL CONTROL
+-----------+------------+-----------+
| Interface | Type       | Ports     |
+-----------+------------+-----------+
| ap_clk    | clock      | ap_clk    |
| ap_rst_n  | reset      | ap_rst_n  |
| interrupt | interrupt  | interrupt |
| ap_ctrl   | ap_ctrl_hs |           |
+-----------+------------+-----------+


================================================================
== SW I/O Information
================================================================
* Top Function Arguments
+----------+-----------+---------------+
| Argument | Direction | Datatype      |
+----------+-----------+---------------+
| start_pc | in        | unsigned int  |
| code_ram | in        | unsigned int* |
+----------+-----------+---------------+

* SW-to-HW Mapping
+----------+---------------+----------+------------------------------------------+
| Argument | HW Interface  | HW Type  | HW Info                                  |
+----------+---------------+----------+------------------------------------------+
| start_pc | s_axi_control | register | name=start_pc offset=0x10 range=32       |
| code_ram | s_axi_control | memory   | name=code_ram offset=262144 range=262144 |
+----------+---------------+----------+------------------------------------------+


================================================================
== M_AXI Burst Information
================================================================
 Note: All burst requests might be further partitioned into multiple requests during RTL generation based on max_read_burst_length or max_write_burst_length settings.


================================================================
== Bind Op Report
================================================================
+-------------------------------+-----+--------+-----------+-------+--------+---------+
| Name                          | DSP | Pragma | Variable  | Op    | Impl   | Latency |
+-------------------------------+-----+--------+-----------+-------+--------+---------+
| + fetching_ip                 | 0   |        |           |       |        |         |
|  + execute                    | 0   |        |           |       |        |         |
|    ap_return                  |     |        | add_ln5   | add   | fabric | 0       |
|  + running_conditional_update | 0   |        |           |       |        |         |
|    ap_return                  |     |        | icmp_ln10 | setne | auto   | 0       |
+-------------------------------+-----+--------+-----------+-------+--------+---------+


================================================================
== Storage Report
================================================================
+-------------------+-----------+-----------+------+------+--------+----------+------+---------+------------------+
| Name              | Usage     | Type      | BRAM | URAM | Pragma | Variable | Impl | Latency | Bitwidth, Depth, |
|                   |           |           |      |      |        |          |      |         | Banks            |
+-------------------+-----------+-----------+------+------+--------+----------+------+---------+------------------+
| + fetching_ip     |           |           | 128  | 0    |        |          |      |         |                  |
|   control_s_axi_U | interface | s_axilite | 128  |      |        |          |      |         |                  |
+-------------------+-----------+-----------+------+------+--------+----------+------+---------+------------------+


================================================================
== Pragma Report
================================================================
* Valid Pragma Syntax
+-----------+------------------------------+-------------------------------------------------+
| Type      | Options                      | Location                                        |
+-----------+------------------------------+-------------------------------------------------+
| inline    |                              | execute.cpp:4 in compute_next_pc                |
| inline    | off                          | execute.cpp:9 in execute                        |
| inline    | off                          | fetch.cpp:17 in fetch                           |
| inline    | off                          | fetching_ip.cpp:9 in running_conditional_update |
| interface | mode=s_axilite port=return   | fetching_ip.cpp:17 in fetching_ip, return       |
| interface | mode=s_axilite port=code_ram | fetching_ip.cpp:18 in fetching_ip, code_ram     |
| interface | mode=s_axilite port=start_pc | fetching_ip.cpp:19 in fetching_ip, start_pc     |
| pipeline  | off                          | fetching_ip.cpp:25 in fetching_ip               |
+-----------+------------------------------+-------------------------------------------------+


