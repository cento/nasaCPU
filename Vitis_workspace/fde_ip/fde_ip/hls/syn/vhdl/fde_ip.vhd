-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fde_ip is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 19;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fde_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fde_ip_fde_ip,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.490000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=2897,HLS_SYN_LUT=4211,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal start_pc : STD_LOGIC_VECTOR (31 downto 0);
    signal code_ram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_instruction_ap_vld : STD_LOGIC;
    signal pc_0_load_reg_1148 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fetch_fu_210_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal instruction_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fetch_fu_210_ap_start : STD_LOGIC;
    signal grp_fetch_fu_210_ap_done : STD_LOGIC;
    signal grp_fetch_fu_210_ap_idle : STD_LOGIC;
    signal grp_fetch_fu_210_ap_ready : STD_LOGIC;
    signal grp_fetch_fu_210_code_ram_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fetch_fu_210_code_ram_ce0 : STD_LOGIC;
    signal grp_decode_fu_217_ap_start : STD_LOGIC;
    signal grp_decode_fu_217_ap_done : STD_LOGIC;
    signal grp_decode_fu_217_ap_idle : STD_LOGIC;
    signal grp_decode_fu_217_ap_ready : STD_LOGIC;
    signal grp_decode_fu_217_ap_return_0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_217_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_217_ap_return_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_217_ap_return_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_217_ap_return_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_217_ap_return_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_decode_fu_217_ap_return_6 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_217_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_execute_fu_223_ap_start : STD_LOGIC;
    signal grp_execute_fu_223_ap_done : STD_LOGIC;
    signal grp_execute_fu_223_ap_idle : STD_LOGIC;
    signal grp_execute_fu_223_ap_ready : STD_LOGIC;
    signal grp_execute_fu_223_d_i_func7_val : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_execute_fu_223_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_execute_fu_223_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_31 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_223_ap_return_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_running_running_cond_update_fu_268_ap_ready : STD_LOGIC;
    signal is_running_running_cond_update_fu_268_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fetch_fu_210_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal grp_decode_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal grp_execute_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state5 : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal pc_0_fu_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal pc_fu_274_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_file_0_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_1_0_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_2_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_3_0_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_4_0_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_5_0_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_6_0_fu_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_7_0_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_8_0_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_9_0_fu_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_10_0_fu_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_11_0_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_12_0_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_13_0_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_14_0_fu_124 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_15_0_fu_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_16_0_fu_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_17_0_fu_136 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_18_0_fu_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_19_0_fu_144 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_20_0_fu_148 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_21_0_fu_152 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_22_0_fu_156 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_23_0_fu_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_24_0_fu_164 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_25_0_fu_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_26_0_fu_172 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_27_0_fu_176 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_28_0_fu_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_29_0_fu_184 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_30_0_fu_188 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_file_31_0_fu_192 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fde_ip_fetch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pc_val : IN STD_LOGIC_VECTOR (15 downto 0);
        code_ram_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        code_ram_ce0 : OUT STD_LOGIC;
        code_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fde_ip_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component fde_ip_execute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pc_val : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        d_i_opcode_val : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_rd_val : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_func3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        d_i_rs1_val : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_rs2_val : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_func7_val : IN STD_LOGIC_VECTOR (5 downto 0);
        d_i_type_val : IN STD_LOGIC_VECTOR (2 downto 0);
        d_i_imm_val : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fde_ip_running_cond_update IS
    port (
        ap_ready : OUT STD_LOGIC;
        instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        pc_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fde_ip_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        start_pc : OUT STD_LOGIC_VECTOR (31 downto 0);
        nb_instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        nb_instruction_ap_vld : IN STD_LOGIC;
        code_ram_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        code_ram_ce0 : IN STD_LOGIC;
        code_ram_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_fetch_fu_210 : component fde_ip_fetch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fetch_fu_210_ap_start,
        ap_done => grp_fetch_fu_210_ap_done,
        ap_idle => grp_fetch_fu_210_ap_idle,
        ap_ready => grp_fetch_fu_210_ap_ready,
        pc_val => pc_0_fu_64,
        code_ram_address0 => grp_fetch_fu_210_code_ram_address0,
        code_ram_ce0 => grp_fetch_fu_210_code_ram_ce0,
        code_ram_q0 => code_ram_q0,
        ap_return => grp_fetch_fu_210_ap_return);

    grp_decode_fu_217 : component fde_ip_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decode_fu_217_ap_start,
        ap_done => grp_decode_fu_217_ap_done,
        ap_idle => grp_decode_fu_217_ap_idle,
        ap_ready => grp_decode_fu_217_ap_ready,
        instruction => grp_fetch_fu_210_ap_return,
        ap_return_0 => grp_decode_fu_217_ap_return_0,
        ap_return_1 => grp_decode_fu_217_ap_return_1,
        ap_return_2 => grp_decode_fu_217_ap_return_2,
        ap_return_3 => grp_decode_fu_217_ap_return_3,
        ap_return_4 => grp_decode_fu_217_ap_return_4,
        ap_return_5 => grp_decode_fu_217_ap_return_5,
        ap_return_6 => grp_decode_fu_217_ap_return_6,
        ap_return_7 => grp_decode_fu_217_ap_return_7);

    grp_execute_fu_223 : component fde_ip_execute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_execute_fu_223_ap_start,
        ap_done => grp_execute_fu_223_ap_done,
        ap_idle => grp_execute_fu_223_ap_idle,
        ap_ready => grp_execute_fu_223_ap_ready,
        pc_val => pc_0_load_reg_1148,
        p_read => reg_file_0_fu_68,
        p_read1 => reg_file_1_0_fu_72,
        p_read2 => reg_file_2_0_fu_76,
        p_read3 => reg_file_3_0_fu_80,
        p_read4 => reg_file_4_0_fu_84,
        p_read5 => reg_file_5_0_fu_88,
        p_read6 => reg_file_6_0_fu_92,
        p_read7 => reg_file_7_0_fu_96,
        p_read8 => reg_file_8_0_fu_100,
        p_read9 => reg_file_9_0_fu_104,
        p_read10 => reg_file_10_0_fu_108,
        p_read11 => reg_file_11_0_fu_112,
        p_read12 => reg_file_12_0_fu_116,
        p_read13 => reg_file_13_0_fu_120,
        p_read14 => reg_file_14_0_fu_124,
        p_read15 => reg_file_15_0_fu_128,
        p_read16 => reg_file_16_0_fu_132,
        p_read17 => reg_file_17_0_fu_136,
        p_read18 => reg_file_18_0_fu_140,
        p_read19 => reg_file_19_0_fu_144,
        p_read20 => reg_file_20_0_fu_148,
        p_read21 => reg_file_21_0_fu_152,
        p_read22 => reg_file_22_0_fu_156,
        p_read23 => reg_file_23_0_fu_160,
        p_read24 => reg_file_24_0_fu_164,
        p_read25 => reg_file_25_0_fu_168,
        p_read26 => reg_file_26_0_fu_172,
        p_read27 => reg_file_27_0_fu_176,
        p_read28 => reg_file_28_0_fu_180,
        p_read29 => reg_file_29_0_fu_184,
        p_read30 => reg_file_30_0_fu_188,
        p_read31 => reg_file_31_0_fu_192,
        d_i_opcode_val => grp_decode_fu_217_ap_return_0,
        d_i_rd_val => grp_decode_fu_217_ap_return_1,
        d_i_func3_val => grp_decode_fu_217_ap_return_2,
        d_i_rs1_val => grp_decode_fu_217_ap_return_3,
        d_i_rs2_val => grp_decode_fu_217_ap_return_4,
        d_i_func7_val => grp_execute_fu_223_d_i_func7_val,
        d_i_type_val => grp_decode_fu_217_ap_return_6,
        d_i_imm_val => grp_decode_fu_217_ap_return_7,
        ap_return_0 => grp_execute_fu_223_ap_return_0,
        ap_return_1 => grp_execute_fu_223_ap_return_1,
        ap_return_2 => grp_execute_fu_223_ap_return_2,
        ap_return_3 => grp_execute_fu_223_ap_return_3,
        ap_return_4 => grp_execute_fu_223_ap_return_4,
        ap_return_5 => grp_execute_fu_223_ap_return_5,
        ap_return_6 => grp_execute_fu_223_ap_return_6,
        ap_return_7 => grp_execute_fu_223_ap_return_7,
        ap_return_8 => grp_execute_fu_223_ap_return_8,
        ap_return_9 => grp_execute_fu_223_ap_return_9,
        ap_return_10 => grp_execute_fu_223_ap_return_10,
        ap_return_11 => grp_execute_fu_223_ap_return_11,
        ap_return_12 => grp_execute_fu_223_ap_return_12,
        ap_return_13 => grp_execute_fu_223_ap_return_13,
        ap_return_14 => grp_execute_fu_223_ap_return_14,
        ap_return_15 => grp_execute_fu_223_ap_return_15,
        ap_return_16 => grp_execute_fu_223_ap_return_16,
        ap_return_17 => grp_execute_fu_223_ap_return_17,
        ap_return_18 => grp_execute_fu_223_ap_return_18,
        ap_return_19 => grp_execute_fu_223_ap_return_19,
        ap_return_20 => grp_execute_fu_223_ap_return_20,
        ap_return_21 => grp_execute_fu_223_ap_return_21,
        ap_return_22 => grp_execute_fu_223_ap_return_22,
        ap_return_23 => grp_execute_fu_223_ap_return_23,
        ap_return_24 => grp_execute_fu_223_ap_return_24,
        ap_return_25 => grp_execute_fu_223_ap_return_25,
        ap_return_26 => grp_execute_fu_223_ap_return_26,
        ap_return_27 => grp_execute_fu_223_ap_return_27,
        ap_return_28 => grp_execute_fu_223_ap_return_28,
        ap_return_29 => grp_execute_fu_223_ap_return_29,
        ap_return_30 => grp_execute_fu_223_ap_return_30,
        ap_return_31 => grp_execute_fu_223_ap_return_31,
        ap_return_32 => grp_execute_fu_223_ap_return_32);

    is_running_running_cond_update_fu_268 : component fde_ip_running_cond_update
    port map (
        ap_ready => is_running_running_cond_update_fu_268_ap_ready,
        instruction => instruction_reg_1154,
        pc_val => grp_execute_fu_223_ap_return_0,
        ap_return => is_running_running_cond_update_fu_268_ap_return);

    control_s_axi_U : component fde_ip_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        start_pc => start_pc,
        nb_instruction => ap_const_lv32_1,
        nb_instruction_ap_vld => nb_instruction_ap_vld,
        code_ram_address0 => grp_fetch_fu_210_code_ram_address0,
        code_ram_ce0 => grp_fetch_fu_210_code_ram_ce0,
        code_ram_q0 => code_ram_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_decode_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decode_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4))) then 
                    grp_decode_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_decode_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_execute_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_execute_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_NS_fsm_state5))) then 
                    grp_execute_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_execute_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_execute_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fetch_fu_210_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fetch_fu_210_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_fetch_fu_210_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fetch_fu_210_ap_ready = ap_const_logic_1)) then 
                    grp_fetch_fu_210_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pc_0_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pc_0_fu_64 <= pc_fu_274_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                pc_0_fu_64 <= grp_execute_fu_223_ap_return_0;
            end if; 
        end if;
    end process;

    reg_file_0_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_0_fu_68 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_0_fu_68 <= grp_execute_fu_223_ap_return_1;
            end if; 
        end if;
    end process;

    reg_file_10_0_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_10_0_fu_108 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_10_0_fu_108 <= grp_execute_fu_223_ap_return_11;
            end if; 
        end if;
    end process;

    reg_file_11_0_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_11_0_fu_112 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_11_0_fu_112 <= grp_execute_fu_223_ap_return_12;
            end if; 
        end if;
    end process;

    reg_file_12_0_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_12_0_fu_116 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_12_0_fu_116 <= grp_execute_fu_223_ap_return_13;
            end if; 
        end if;
    end process;

    reg_file_13_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_13_0_fu_120 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_13_0_fu_120 <= grp_execute_fu_223_ap_return_14;
            end if; 
        end if;
    end process;

    reg_file_14_0_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_14_0_fu_124 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_14_0_fu_124 <= grp_execute_fu_223_ap_return_15;
            end if; 
        end if;
    end process;

    reg_file_15_0_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_15_0_fu_128 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_15_0_fu_128 <= grp_execute_fu_223_ap_return_16;
            end if; 
        end if;
    end process;

    reg_file_16_0_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_16_0_fu_132 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_16_0_fu_132 <= grp_execute_fu_223_ap_return_17;
            end if; 
        end if;
    end process;

    reg_file_17_0_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_17_0_fu_136 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_17_0_fu_136 <= grp_execute_fu_223_ap_return_18;
            end if; 
        end if;
    end process;

    reg_file_18_0_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_18_0_fu_140 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_18_0_fu_140 <= grp_execute_fu_223_ap_return_19;
            end if; 
        end if;
    end process;

    reg_file_19_0_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_19_0_fu_144 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_19_0_fu_144 <= grp_execute_fu_223_ap_return_20;
            end if; 
        end if;
    end process;

    reg_file_1_0_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_1_0_fu_72 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_1_0_fu_72 <= grp_execute_fu_223_ap_return_2;
            end if; 
        end if;
    end process;

    reg_file_20_0_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_20_0_fu_148 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_20_0_fu_148 <= grp_execute_fu_223_ap_return_21;
            end if; 
        end if;
    end process;

    reg_file_21_0_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_21_0_fu_152 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_21_0_fu_152 <= grp_execute_fu_223_ap_return_22;
            end if; 
        end if;
    end process;

    reg_file_22_0_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_22_0_fu_156 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_22_0_fu_156 <= grp_execute_fu_223_ap_return_23;
            end if; 
        end if;
    end process;

    reg_file_23_0_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_23_0_fu_160 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_23_0_fu_160 <= grp_execute_fu_223_ap_return_24;
            end if; 
        end if;
    end process;

    reg_file_24_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_24_0_fu_164 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_24_0_fu_164 <= grp_execute_fu_223_ap_return_25;
            end if; 
        end if;
    end process;

    reg_file_25_0_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_25_0_fu_168 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_25_0_fu_168 <= grp_execute_fu_223_ap_return_26;
            end if; 
        end if;
    end process;

    reg_file_26_0_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_26_0_fu_172 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_26_0_fu_172 <= grp_execute_fu_223_ap_return_27;
            end if; 
        end if;
    end process;

    reg_file_27_0_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_27_0_fu_176 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_27_0_fu_176 <= grp_execute_fu_223_ap_return_28;
            end if; 
        end if;
    end process;

    reg_file_28_0_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_28_0_fu_180 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_28_0_fu_180 <= grp_execute_fu_223_ap_return_29;
            end if; 
        end if;
    end process;

    reg_file_29_0_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_29_0_fu_184 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_29_0_fu_184 <= grp_execute_fu_223_ap_return_30;
            end if; 
        end if;
    end process;

    reg_file_2_0_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_2_0_fu_76 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_2_0_fu_76 <= grp_execute_fu_223_ap_return_3;
            end if; 
        end if;
    end process;

    reg_file_30_0_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_30_0_fu_188 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_30_0_fu_188 <= grp_execute_fu_223_ap_return_31;
            end if; 
        end if;
    end process;

    reg_file_31_0_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_31_0_fu_192 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_31_0_fu_192 <= grp_execute_fu_223_ap_return_32;
            end if; 
        end if;
    end process;

    reg_file_3_0_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_3_0_fu_80 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_3_0_fu_80 <= grp_execute_fu_223_ap_return_4;
            end if; 
        end if;
    end process;

    reg_file_4_0_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_4_0_fu_84 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_4_0_fu_84 <= grp_execute_fu_223_ap_return_5;
            end if; 
        end if;
    end process;

    reg_file_5_0_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_5_0_fu_88 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_5_0_fu_88 <= grp_execute_fu_223_ap_return_6;
            end if; 
        end if;
    end process;

    reg_file_6_0_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_6_0_fu_92 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_6_0_fu_92 <= grp_execute_fu_223_ap_return_7;
            end if; 
        end if;
    end process;

    reg_file_7_0_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_7_0_fu_96 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_7_0_fu_96 <= grp_execute_fu_223_ap_return_8;
            end if; 
        end if;
    end process;

    reg_file_8_0_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_8_0_fu_100 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_8_0_fu_100 <= grp_execute_fu_223_ap_return_9;
            end if; 
        end if;
    end process;

    reg_file_9_0_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reg_file_9_0_fu_104 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_file_9_0_fu_104 <= grp_execute_fu_223_ap_return_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                instruction_reg_1154 <= grp_fetch_fu_210_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                pc_0_load_reg_1148 <= pc_0_fu_64;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, is_running_running_cond_update_fu_268_ap_return, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (is_running_running_cond_update_fu_268_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state5 <= ap_NS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_decode_fu_217_ap_start <= grp_decode_fu_217_ap_start_reg;
    grp_execute_fu_223_ap_start <= grp_execute_fu_223_ap_start_reg;
    grp_execute_fu_223_d_i_func7_val <= grp_decode_fu_217_ap_return_5(6 - 1 downto 0);
    grp_fetch_fu_210_ap_start <= grp_fetch_fu_210_ap_start_reg;

    nb_instruction_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            nb_instruction_ap_vld <= ap_const_logic_1;
        else 
            nb_instruction_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pc_fu_274_p1 <= start_pc(16 - 1 downto 0);
end behav;
